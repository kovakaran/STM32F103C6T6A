
KeyPad_Interface_4x4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004d4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002c4  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000019a  00000000  00000000  00010804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  000109a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000070  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015b4  00000000  00000000  00010ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000061e  00000000  00000000  00012064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006771  00000000  00000000  00012682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001d8  00000000  00000000  00018df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00018fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000490 	.word	0x08000490

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000490 	.word	0x08000490

08000170 <SysTick_Handler>:
/******************************************************************************                                                                           *                                                                          *
 * 			 			Interrupt-Handler Functions                           *
 *****************************************************************************/

// SysTick_Handler function will be called every microsecond
void SysTick_Handler(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    micros++;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <SysTick_Handler+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	4a03      	ldr	r2, [pc, #12]	; (8000188 <SysTick_Handler+0x18>)
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000001c 	.word	0x2000001c

0800018c <delay_us>:




// Simple delay function using the SysTick timer for microseconds
void delay_us(uint32_t us) {
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
    uint32_t start = micros;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <delay_us+0x2c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	60fb      	str	r3, [r7, #12]
    while ((micros - start) < us);
 800019a:	bf00      	nop
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <delay_us+0x2c>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	429a      	cmp	r2, r3
 80001a8:	d8f8      	bhi.n	800019c <delay_us+0x10>
}
 80001aa:	bf00      	nop
 80001ac:	bf00      	nop
 80001ae:	3714      	adds	r7, #20
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	2000001c 	.word	0x2000001c

080001bc <main>:
void LCD_SendCommand(uint8_t command); // Function to send a command to the LCD
void LCD_SendData(uint8_t data); // Function to send data to the LCD
void LCD_PrintString(char* str); // Function to print a string on the LCD

int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
		GPIO_Init();
 80001c0:	f000 f80e 	bl	80001e0 <GPIO_Init>
		LCD_Init(); // Initialize LCD
 80001c4:	f000 f83a 	bl	800023c <LCD_Init>
		LCD_SendCommand(0x80);   // Move cursor to the beginning of the first line
 80001c8:	2080      	movs	r0, #128	; 0x80
 80001ca:	f000 f86b 	bl	80002a4 <LCD_SendCommand>
		LCD_PrintString("~~~~~Line 1~~~~~");
 80001ce:	4803      	ldr	r0, [pc, #12]	; (80001dc <main+0x20>)
 80001d0:	f000 f8b4 	bl	800033c <LCD_PrintString>
		while(1){
		KEYPAD_Read();
 80001d4:	f000 f8c8 	bl	8000368 <KEYPAD_Read>
 80001d8:	e7fc      	b.n	80001d4 <main+0x18>
 80001da:	bf00      	nop
 80001dc:	080004a8 	.word	0x080004a8

080001e0 <GPIO_Init>:
}



void GPIO_Init(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= ( SET_BIT_2 | SET_BIT_3 );			// Enable Clock for GPIO-A, GPIO-B
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <GPIO_Init+0x50>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <GPIO_Init+0x50>)
 80001ea:	f043 030c 	orr.w	r3, r3, #12
 80001ee:	6013      	str	r3, [r2, #0]

	GPIOA_CRH &= 0xFFFF0000;							// A8-A11 -> Set as Output PP
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <GPIO_Init+0x54>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <GPIO_Init+0x54>)
 80001f6:	0c1b      	lsrs	r3, r3, #16
 80001f8:	041b      	lsls	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00002222;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <GPIO_Init+0x54>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <GPIO_Init+0x54>)
 8000202:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8000206:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 800020a:	6013      	str	r3, [r2, #0]

	GPIOB_CRL &= 0xFFFF0000;							// B0-B3 -> Set as Input Pull-Down
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <GPIO_Init+0x58>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <GPIO_Init+0x58>)
 8000212:	0c1b      	lsrs	r3, r3, #16
 8000214:	041b      	lsls	r3, r3, #16
 8000216:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= 0x00008888;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <GPIO_Init+0x58>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <GPIO_Init+0x58>)
 800021e:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 8000222:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40021018 	.word	0x40021018
 8000234:	40010804 	.word	0x40010804
 8000238:	40010c00 	.word	0x40010c00

0800023c <LCD_Init>:



void LCD_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
    delay_us(20000); 								 // Wait for LCD to power up
 8000240:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000244:	f7ff ffa2 	bl	800018c <delay_us>

    RCC_APB2ENR |= (SET_BIT_2 | SET_BIT_4);   		 // Enable GPIOA and GPIOC clock
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <LCD_Init+0x5c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <LCD_Init+0x5c>)
 800024e:	f043 0314 	orr.w	r3, r3, #20
 8000252:	6013      	str	r3, [r2, #0]
    GPIOA_CRL = 0x22222222;  						 //Set->GPIOA0-A7 as Output-Push/Pull
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <LCD_Init+0x60>)
 8000256:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 800025a:	601a      	str	r2, [r3, #0]
    GPIOC_CRH &= 0x00FFFFFF;GPIOC_CRH |= 0x22000000; //Set->GPIOC14-C15 as Output-Push/Pull
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <LCD_Init+0x64>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0f      	ldr	r2, [pc, #60]	; (80002a0 <LCD_Init+0x64>)
 8000262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <LCD_Init+0x64>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <LCD_Init+0x64>)
 800026e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000272:	6013      	str	r3, [r2, #0]

    // Initialize LCD
    LCD_SendCommand(0x38);   // 8-bit data, 2-line display, 5x8 font
 8000274:	2038      	movs	r0, #56	; 0x38
 8000276:	f000 f815 	bl	80002a4 <LCD_SendCommand>
    LCD_SendCommand(0x0C);   // Display on, cursor off
 800027a:	200c      	movs	r0, #12
 800027c:	f000 f812 	bl	80002a4 <LCD_SendCommand>
    LCD_SendCommand(0x01);   // Clear display
 8000280:	2001      	movs	r0, #1
 8000282:	f000 f80f 	bl	80002a4 <LCD_SendCommand>
    delay_us(2000);
 8000286:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800028a:	f7ff ff7f 	bl	800018c <delay_us>
    LCD_SendCommand(0x06);   // Entry mode set: Increment cursor
 800028e:	2006      	movs	r0, #6
 8000290:	f000 f808 	bl	80002a4 <LCD_SendCommand>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021018 	.word	0x40021018
 800029c:	40010800 	.word	0x40010800
 80002a0:	40011004 	.word	0x40011004

080002a4 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t command)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    GPIOC_ODR &= CLEAR_BIT_14; // RS = 0 (Command mode)
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <LCD_SendCommand+0x44>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LCD_SendCommand+0x44>)
 80002b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002b8:	6013      	str	r3, [r2, #0]
    GPIOA_ODR = (uint16_t)(command);   // Send command to data pins
 80002ba:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <LCD_SendCommand+0x48>)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	6013      	str	r3, [r2, #0]
    GPIOC_ODR |= SET_BIT_15; // Enable LCD
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <LCD_SendCommand+0x44>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <LCD_SendCommand+0x44>)
 80002c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ca:	6013      	str	r3, [r2, #0]
    delay_us(10);
 80002cc:	200a      	movs	r0, #10
 80002ce:	f7ff ff5d 	bl	800018c <delay_us>
    GPIOC_ODR &= ~SET_BIT_15;   // Disable LCD
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <LCD_SendCommand+0x44>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <LCD_SendCommand+0x44>)
 80002d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	4001100c 	.word	0x4001100c
 80002ec:	4001080c 	.word	0x4001080c

080002f0 <LCD_SendData>:


void LCD_SendData(uint8_t data)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
    GPIOC_ODR |= SET_BIT_14;   // RS = 1 (Data mode)
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <LCD_SendData+0x44>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LCD_SendData+0x44>)
 8000300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000304:	6013      	str	r3, [r2, #0]
    GPIOA_ODR = (uint16_t)(data);   // Send data to data pins
 8000306:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <LCD_SendData+0x48>)
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	6013      	str	r3, [r2, #0]
    GPIOC_ODR |= SET_BIT_15; // Enable LCD
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <LCD_SendData+0x44>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <LCD_SendData+0x44>)
 8000312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000316:	6013      	str	r3, [r2, #0]
    delay_us(10);
 8000318:	200a      	movs	r0, #10
 800031a:	f7ff ff37 	bl	800018c <delay_us>
    GPIOC_ODR &= ~SET_BIT_15;   // Disable LCD
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <LCD_SendData+0x44>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a04      	ldr	r2, [pc, #16]	; (8000334 <LCD_SendData+0x44>)
 8000324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000328:	6013      	str	r3, [r2, #0]
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	4001100c 	.word	0x4001100c
 8000338:	4001080c 	.word	0x4001080c

0800033c <LCD_PrintString>:


void LCD_PrintString(char* str)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000344:	e006      	b.n	8000354 <LCD_PrintString+0x18>
        LCD_SendData(*str++);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	607a      	str	r2, [r7, #4]
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffce 	bl	80002f0 <LCD_SendData>
    while (*str) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f4      	bne.n	8000346 <LCD_PrintString+0xa>
    }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <KEYPAD_Read>:



void KEYPAD_Read(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
	uint8_t keypad_matrix[4][4] = {
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <KEYPAD_Read+0x80>)
 8000370:	463c      	mov	r4, r7
 8000372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									{'4', '5', '6', 'B'},
									{'7', '8', '9', 'C'},
	        						{'*', '0', '#', 'D'}
	    							};

	for(int row = 0; row < 4; row++)
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	e02b      	b.n	80003d6 <KEYPAD_Read+0x6e>
	{
		GPIOA_ODR = (1 << (row + 8));		// Moves to A8-bit(A8-A11 are rows)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3308      	adds	r3, #8
 8000382:	2201      	movs	r2, #1
 8000384:	409a      	lsls	r2, r3
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <KEYPAD_Read+0x84>)
 8000388:	601a      	str	r2, [r3, #0]
		for(int col = 0; col < 4; col++)
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
 800038e:	e019      	b.n	80003c4 <KEYPAD_Read+0x5c>
		{
			if( (GPIOB_IDR & (1 << col)) )
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <KEYPAD_Read+0x88>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2101      	movs	r1, #1
 8000396:	693a      	ldr	r2, [r7, #16]
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	4013      	ands	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00d      	beq.n	80003be <KEYPAD_Read+0x56>
			{
				LCD_SendCommand(0xC0); // Move cursor to the beginning of the second line
 80003a2:	20c0      	movs	r0, #192	; 0xc0
 80003a4:	f7ff ff7e 	bl	80002a4 <LCD_SendCommand>
				 LCD_SendData( keypad_matrix[row][col] );
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	3318      	adds	r3, #24
 80003ae:	19da      	adds	r2, r3, r7
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	4413      	add	r3, r2
 80003b4:	3b18      	subs	r3, #24
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff99 	bl	80002f0 <LCD_SendData>
		for(int col = 0; col < 4; col++)
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	3301      	adds	r3, #1
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	dde2      	ble.n	8000390 <KEYPAD_Read+0x28>
			}
		}

		GPIOA_ODR = 0x0000;					// Reset Rows
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <KEYPAD_Read+0x84>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
	for(int row = 0; row < 4; row++)
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	3301      	adds	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	ddd0      	ble.n	800037e <KEYPAD_Read+0x16>

	}
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	371c      	adds	r7, #28
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd90      	pop	{r4, r7, pc}
 80003e6:	bf00      	nop
 80003e8:	080004bc 	.word	0x080004bc
 80003ec:	4001080c 	.word	0x4001080c
 80003f0:	40010c08 	.word	0x40010c08

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f000 f811 	bl	8000448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f7ff fec9 	bl	80001bc <main>

0800042a <LoopForever>:

LoopForever:
  b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000438:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 800043c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000440:	20000020 	.word	0x20000020

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	2600      	movs	r6, #0
 800044c:	4d0c      	ldr	r5, [pc, #48]	; (8000480 <__libc_init_array+0x38>)
 800044e:	4c0d      	ldr	r4, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	10a4      	asrs	r4, r4, #2
 8000454:	42a6      	cmp	r6, r4
 8000456:	d109      	bne.n	800046c <__libc_init_array+0x24>
 8000458:	f000 f81a 	bl	8000490 <_init>
 800045c:	2600      	movs	r6, #0
 800045e:	4d0a      	ldr	r5, [pc, #40]	; (8000488 <__libc_init_array+0x40>)
 8000460:	4c0a      	ldr	r4, [pc, #40]	; (800048c <__libc_init_array+0x44>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	42a6      	cmp	r6, r4
 8000468:	d105      	bne.n	8000476 <__libc_init_array+0x2e>
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000470:	4798      	blx	r3
 8000472:	3601      	adds	r6, #1
 8000474:	e7ee      	b.n	8000454 <__libc_init_array+0xc>
 8000476:	f855 3b04 	ldr.w	r3, [r5], #4
 800047a:	4798      	blx	r3
 800047c:	3601      	adds	r6, #1
 800047e:	e7f2      	b.n	8000466 <__libc_init_array+0x1e>
 8000480:	080004cc 	.word	0x080004cc
 8000484:	080004cc 	.word	0x080004cc
 8000488:	080004cc 	.word	0x080004cc
 800048c:	080004d0 	.word	0x080004d0

08000490 <_init>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr

0800049c <_fini>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr
