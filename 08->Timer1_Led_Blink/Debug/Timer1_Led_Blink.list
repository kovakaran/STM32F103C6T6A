
Timer1_Led_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003c8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001fd  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000138  00000000  00000000  00010631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00010770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005d  00000000  00000000  000107f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015b4  00000000  00000000  00010855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000058a  00000000  00000000  00011e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006724  00000000  00000000  00012393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000170  00000000  00000000  00018ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00018c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a8 	.word	0x080003a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003a8 	.word	0x080003a8

08000170 <SysTick_Handler>:
/******************************************************************************                                                                           *                                                                          *
 * 			 			Interrupt-Handler Functions                           *
 *****************************************************************************/

// SysTick_Handler function will be called every microsecond
void SysTick_Handler(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    micros++;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <SysTick_Handler+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	4a03      	ldr	r2, [pc, #12]	; (8000188 <SysTick_Handler+0x18>)
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000001c 	.word	0x2000001c

0800018c <System_Clock_Init>:
void delay_ms(uint32_t ms);
void delay_us(uint32_t us);


void System_Clock_Init(void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	RCC_CFGR |= RCC_CFGR_PPRE1_2;								// APB1 Sets to 36MHz
 8000190:	4b1e      	ldr	r3, [pc, #120]	; (800020c <System_Clock_Init+0x80>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a1d      	ldr	r2, [pc, #116]	; (800020c <System_Clock_Init+0x80>)
 8000196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800019a:	6013      	str	r3, [r2, #0]
	RCC_CR |= RCC_CR_HSEON;										// Enable HSE (High-Speed External) clock
 800019c:	4b1c      	ldr	r3, [pc, #112]	; (8000210 <System_Clock_Init+0x84>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <System_Clock_Init+0x84>)
 80001a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a6:	6013      	str	r3, [r2, #0]
	while(!(RCC_CR & RCC_CR_HSERDY));							// Wait until HSE is ready
 80001a8:	bf00      	nop
 80001aa:	4b19      	ldr	r3, [pc, #100]	; (8000210 <System_Clock_Init+0x84>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f9      	beq.n	80001aa <System_Clock_Init+0x1e>

	RCC_CFGR |=	RCC_CFGR_PLLSRC_HSE;							// HSE is PLL input clock source
 80001b6:	4b15      	ldr	r3, [pc, #84]	; (800020c <System_Clock_Init+0x80>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a14      	ldr	r2, [pc, #80]	; (800020c <System_Clock_Init+0x80>)
 80001bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001c0:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= RCC_CFGR_PLLMULx8;								// PLL multiplication factor (9)
 80001c2:	4b12      	ldr	r3, [pc, #72]	; (800020c <System_Clock_Init+0x80>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a11      	ldr	r2, [pc, #68]	; (800020c <System_Clock_Init+0x80>)
 80001c8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001cc:	6013      	str	r3, [r2, #0]
	RCC_CR |= RCC_CR_PLLON;										// Enable PLL
 80001ce:	4b10      	ldr	r3, [pc, #64]	; (8000210 <System_Clock_Init+0x84>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0f      	ldr	r2, [pc, #60]	; (8000210 <System_Clock_Init+0x84>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	while(!(RCC_CR & RCC_CR_PLLRDY));							// Wait until PLL is ready
 80001da:	bf00      	nop
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <System_Clock_Init+0x84>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <System_Clock_Init+0x50>


	RCC_CFGR |= RCC_CFGR_SW_PLL;								// Set PLL as the system clock source
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <System_Clock_Init+0x80>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <System_Clock_Init+0x80>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6013      	str	r3, [r2, #0]
	while(!(RCC_CFGR & RCC_CFGR_SWS_PLL));						// Wait until PLL becomes the system clock source
 80001f4:	bf00      	nop
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <System_Clock_Init+0x80>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <System_Clock_Init+0x6a>

}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021004 	.word	0x40021004
 8000210:	40021000 	.word	0x40021000

08000214 <main>:
void Gpio_Init(void);
void Tim1_Init(void);
void Delay_Ms(uint16_t ms);

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	System_Clock_Init();		//To enable External clock
 8000218:	f7ff ffb8 	bl	800018c <System_Clock_Init>
	Gpio_Init();
 800021c:	f000 f814 	bl	8000248 <Gpio_Init>
	Tim1_Init();
 8000220:	f000 f82e 	bl	8000280 <Tim1_Init>

	while(1)
	{
		GPIOA_ODR = 0x00000100;
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <main+0x30>)
 8000226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800022a:	601a      	str	r2, [r3, #0]
		Delay_Ms(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000230:	f000 f852 	bl	80002d8 <Delay_Ms>
		GPIOA_ODR = 0x00000000;
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <main+0x30>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
		Delay_Ms(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f000 f84b 	bl	80002d8 <Delay_Ms>
		GPIOA_ODR = 0x00000100;
 8000242:	e7ef      	b.n	8000224 <main+0x10>
 8000244:	4001080c 	.word	0x4001080c

08000248 <Gpio_Init>:
	}
}


void Gpio_Init(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

	RCC_APB2ENR |= 0x00000005;    		// Enable GPIOA CLOCK
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <Gpio_Init+0x30>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a09      	ldr	r2, [pc, #36]	; (8000278 <Gpio_Init+0x30>)
 8000252:	f043 0305 	orr.w	r3, r3, #5
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFFFFFFF0;			// GPIOA8 set as output PP
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <Gpio_Init+0x34>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a07      	ldr	r2, [pc, #28]	; (800027c <Gpio_Init+0x34>)
 800025e:	f023 030f 	bic.w	r3, r3, #15
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00000002;
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <Gpio_Init+0x34>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <Gpio_Init+0x34>)
 800026a:	f043 0302 	orr.w	r3, r3, #2
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021018 	.word	0x40021018
 800027c:	40010804 	.word	0x40010804

08000280 <Tim1_Init>:


void Tim1_Init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC_APB2ENR |=	SET_BIT_11;						// Enable clock for TIM1
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <Tim1_Init+0x48>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <Tim1_Init+0x48>)
 800028a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800028e:	6013      	str	r3, [r2, #0]
	TIM1_PSC = ( 64000U - 1U );						// TIM1 Pre-scaler for a 1 KHz clock (adjust based on your clock frequency)
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <Tim1_Init+0x4c>)
 8000292:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000296:	801a      	strh	r2, [r3, #0]
	TIM1_ARR = 0xFFFF;								// 16-bit ARR is set to maximum
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <Tim1_Init+0x50>)
 800029a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800029e:	801a      	strh	r2, [r3, #0]
	TIM1_CR1 |=  TIMx_CR1_ARPE;						// Enable Auto-Reload PreLoad
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <Tim1_Init+0x54>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <Tim1_Init+0x54>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	8013      	strh	r3, [r2, #0]
	TIM1_CR1 |= TIMx_CR1_CEN;						// Enable TIM1 counter
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <Tim1_Init+0x54>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <Tim1_Init+0x54>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	b29b      	uxth	r3, r3
 80002be:	8013      	strh	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021018 	.word	0x40021018
 80002cc:	40012c28 	.word	0x40012c28
 80002d0:	40012c2c 	.word	0x40012c2c
 80002d4:	40012c00 	.word	0x40012c00

080002d8 <Delay_Ms>:

void Delay_Ms(uint16_t ms)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	80fb      	strh	r3, [r7, #6]
	    uint16_t startValue = TIM1_CNT;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <Delay_Ms+0x30>)
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	81fb      	strh	r3, [r7, #14]
	    while ((uint16_t)(TIM1_CNT - startValue) < ms);
 80002e8:	bf00      	nop
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <Delay_Ms+0x30>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	89fb      	ldrh	r3, [r7, #14]
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	88fa      	ldrh	r2, [r7, #6]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d8f6      	bhi.n	80002ea <Delay_Ms+0x12>
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40012c24 	.word	0x40012c24

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff69 	bl	8000214 <main>

08000342 <LoopForever>:

LoopForever:
  b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	20000020 	.word	0x20000020

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	2600      	movs	r6, #0
 8000364:	4d0c      	ldr	r5, [pc, #48]	; (8000398 <__libc_init_array+0x38>)
 8000366:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	f000 f81a 	bl	80003a8 <_init>
 8000374:	2600      	movs	r6, #0
 8000376:	4d0a      	ldr	r5, [pc, #40]	; (80003a0 <__libc_init_array+0x40>)
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <__libc_init_array+0x44>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
