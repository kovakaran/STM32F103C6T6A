
Servo_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003f4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001041d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001f8  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000013f  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00010818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015b4  00000000  00000000  00010870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000057a  00000000  00000000  00011e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000670b  00000000  00000000  0001239e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000150  00000000  00000000  00018aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00018bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d4 	.word	0x080003d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d4 	.word	0x080003d4

08000170 <SysTick_Handler>:
/******************************************************************************                                                                           *                                                                          *
 * 			 			Interrupt-Handler Functions                           *
 *****************************************************************************/

// SysTick_Handler function will be called every microsecond
void SysTick_Handler(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    micros++;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <SysTick_Handler+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	4a03      	ldr	r2, [pc, #12]	; (8000188 <SysTick_Handler+0x18>)
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000001c 	.word	0x2000001c

0800018c <System_Clock_Init>:
void delay_ms(uint32_t ms);
void delay_us(uint32_t us);


void System_Clock_Init(void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	RCC_CFGR |= RCC_CFGR_PPRE1_2;								// APB1 Sets to 36MHz
 8000190:	4b1e      	ldr	r3, [pc, #120]	; (800020c <System_Clock_Init+0x80>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a1d      	ldr	r2, [pc, #116]	; (800020c <System_Clock_Init+0x80>)
 8000196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800019a:	6013      	str	r3, [r2, #0]
	RCC_CR |= RCC_CR_HSEON;										// Enable HSE (High-Speed External) clock
 800019c:	4b1c      	ldr	r3, [pc, #112]	; (8000210 <System_Clock_Init+0x84>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <System_Clock_Init+0x84>)
 80001a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a6:	6013      	str	r3, [r2, #0]
	while(!(RCC_CR & RCC_CR_HSERDY));							// Wait until HSE is ready
 80001a8:	bf00      	nop
 80001aa:	4b19      	ldr	r3, [pc, #100]	; (8000210 <System_Clock_Init+0x84>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f9      	beq.n	80001aa <System_Clock_Init+0x1e>

	RCC_CFGR |=	RCC_CFGR_PLLSRC_HSE;							// HSE is PLL input clock source
 80001b6:	4b15      	ldr	r3, [pc, #84]	; (800020c <System_Clock_Init+0x80>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a14      	ldr	r2, [pc, #80]	; (800020c <System_Clock_Init+0x80>)
 80001bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001c0:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= RCC_CFGR_PLLMULx8;								// PLL multiplication factor (9)
 80001c2:	4b12      	ldr	r3, [pc, #72]	; (800020c <System_Clock_Init+0x80>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a11      	ldr	r2, [pc, #68]	; (800020c <System_Clock_Init+0x80>)
 80001c8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001cc:	6013      	str	r3, [r2, #0]
	RCC_CR |= RCC_CR_PLLON;										// Enable PLL
 80001ce:	4b10      	ldr	r3, [pc, #64]	; (8000210 <System_Clock_Init+0x84>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0f      	ldr	r2, [pc, #60]	; (8000210 <System_Clock_Init+0x84>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	while(!(RCC_CR & RCC_CR_PLLRDY));							// Wait until PLL is ready
 80001da:	bf00      	nop
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <System_Clock_Init+0x84>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <System_Clock_Init+0x50>


	RCC_CFGR |= RCC_CFGR_SW_PLL;								// Set PLL as the system clock source
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <System_Clock_Init+0x80>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <System_Clock_Init+0x80>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6013      	str	r3, [r2, #0]
	while(!(RCC_CFGR & RCC_CFGR_SWS_PLL));						// Wait until PLL becomes the system clock source
 80001f4:	bf00      	nop
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <System_Clock_Init+0x80>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <System_Clock_Init+0x6a>

}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021004 	.word	0x40021004
 8000210:	40021000 	.word	0x40021000

08000214 <main>:
void Tim1_Pwm_Init(void);
void delay(uint32_t sec);


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	System_Clock_Init();
 8000218:	f7ff ffb8 	bl	800018c <System_Clock_Init>
	RCC_APB2ENR |= 0x00000005;    		// Enable GPIOA CLOCK
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <main+0x50>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a10      	ldr	r2, [pc, #64]	; (8000264 <main+0x50>)
 8000222:	f043 0305 	orr.w	r3, r3, #5
 8000226:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFFFFFFF0;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <main+0x54>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <main+0x54>)
 800022e:	f023 030f 	bic.w	r3, r3, #15
 8000232:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x0000000A;			// Enables GPIOA8 mode as Alternative Function Push/Pull
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0x54>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <main+0x54>)
 800023a:	f043 030a 	orr.w	r3, r3, #10
 800023e:	6013      	str	r3, [r2, #0]
	Tim1_Pwm_Init();
 8000240:	f000 f816 	bl	8000270 <Tim1_Pwm_Init>

	while(1)
	{
		TIM1_CCR1 = 2500U ;				// Rotate 180 degree
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x58>)
 8000246:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800024a:	801a      	strh	r2, [r3, #0]
		delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f857 	bl	8000300 <delay>
		TIM1_CCR1 = 500U ;				// Rotate back to 0 degree
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <main+0x58>)
 8000254:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000258:	801a      	strh	r2, [r3, #0]
		delay(12);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f850 	bl	8000300 <delay>
		TIM1_CCR1 = 2500U ;				// Rotate 180 degree
 8000260:	e7f0      	b.n	8000244 <main+0x30>
 8000262:	bf00      	nop
 8000264:	40021018 	.word	0x40021018
 8000268:	40010804 	.word	0x40010804
 800026c:	40012c34 	.word	0x40012c34

08000270 <Tim1_Pwm_Init>:
}



void Tim1_Pwm_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC_APB2ENR |=	SET_BIT_11;					// Enable clock for TIM1
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <Tim1_Pwm_Init+0x74>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <Tim1_Pwm_Init+0x74>)
 800027a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800027e:	6013      	str	r3, [r2, #0]

	TIM1_PSC = ( 64U - 1U );					// TIM1 Pre-scaler for a 1 MHz clock (adjust based on your clock frequency)
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <Tim1_Pwm_Init+0x78>)
 8000282:	223f      	movs	r2, #63	; 0x3f
 8000284:	801a      	strh	r2, [r3, #0]
	TIM1_ARR = 20000U -1U ;						// Configure TIM1 period for a PWM frequency of 50 Hz
 8000286:	4b19      	ldr	r3, [pc, #100]	; (80002ec <Tim1_Pwm_Init+0x7c>)
 8000288:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800028c:	801a      	strh	r2, [r3, #0]

	TIM1_CR1 |=  0x0080;						// Enable Auto-Reload PreLoad
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <Tim1_Pwm_Init+0x80>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	4a16      	ldr	r2, [pc, #88]	; (80002f0 <Tim1_Pwm_Init+0x80>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800029a:	b29b      	uxth	r3, r3
 800029c:	8013      	strh	r3, [r2, #0]
	TIM1_CCMR1 = 0x6060 ;						// PWM mode 1 and Enable PreLoad
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <Tim1_Pwm_Init+0x84>)
 80002a0:	f246 0260 	movw	r2, #24672	; 0x6060
 80002a4:	801a      	strh	r2, [r3, #0]
	TIM1_CCER |= 0x0011;						// Enable output for CCR1
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <Tim1_Pwm_Init+0x88>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <Tim1_Pwm_Init+0x88>)
 80002ae:	f043 0311 	orr.w	r3, r3, #17
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	8013      	strh	r3, [r2, #0]
	TIM1_BDTR |= 0x8000;						// Enable TIM1 main output
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <Tim1_Pwm_Init+0x8c>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <Tim1_Pwm_Init+0x8c>)
 80002be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80002c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	8013      	strh	r3, [r2, #0]
	TIM1_CR1 |= 0x0001;							// Enable TIM1 counter
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <Tim1_Pwm_Init+0x80>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <Tim1_Pwm_Init+0x80>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	8013      	strh	r3, [r2, #0]

}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021018 	.word	0x40021018
 80002e8:	40012c28 	.word	0x40012c28
 80002ec:	40012c2c 	.word	0x40012c2c
 80002f0:	40012c00 	.word	0x40012c00
 80002f4:	40012c18 	.word	0x40012c18
 80002f8:	40012c20 	.word	0x40012c20
 80002fc:	40012c44 	.word	0x40012c44

08000300 <delay>:



void delay(uint32_t sec) {
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
		sec = sec * 6400000; 						 // Adjust for your actual clock frequency
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <delay+0x34>)
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	607b      	str	r3, [r7, #4]
	    for(int i = 0; i < sec; i++);
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	e002      	b.n	800031e <delay+0x1e>
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	429a      	cmp	r2, r3
 8000324:	d8f8      	bhi.n	8000318 <delay+0x18>
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	0061a800 	.word	0x0061a800

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff53 	bl	8000214 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	20000020 	.word	0x20000020

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2600      	movs	r6, #0
 8000390:	4d0c      	ldr	r5, [pc, #48]	; (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	f000 f81a 	bl	80003d4 <_init>
 80003a0:	2600      	movs	r6, #0
 80003a2:	4d0a      	ldr	r5, [pc, #40]	; (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <__libc_init_array+0x44>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
