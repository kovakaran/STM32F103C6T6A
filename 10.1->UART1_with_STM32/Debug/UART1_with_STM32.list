
UART1_with_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000031c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800044c  08000454  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800044c  0800044c  00010454  2**0
                  CONTENTS
  4 .ARM          00000000  0800044c  0800044c  00010454  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800044c  08000454  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000454  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000454  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001047d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000023a  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000015c  00000000  00000000  000106fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00010858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000069  00000000  00000000  000108f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002139  00000000  00000000  00010959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000718  00000000  00000000  00012a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a112  00000000  00000000  000131aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001b0  00000000  00000000  0001d2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0001d46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000434 	.word	0x08000434

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000434 	.word	0x08000434

08000170 <SysTick_Handler>:
/******************************************************************************                                                                           *                                                                          *
 * 			 			Interrupt-Handler Functions                           *
 *****************************************************************************/

// SysTick_Handler function will be called every microsecond
void SysTick_Handler(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    micros++;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <SysTick_Handler+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	4a03      	ldr	r2, [pc, #12]	; (8000188 <SysTick_Handler+0x18>)
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000001c 	.word	0x2000001c

0800018c <System_Clock_Init>:
void delay_ms(uint32_t ms);
void delay_us(uint32_t us);


void System_Clock_Init(void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	RCC_CFGR |= RCC_CFGR_PPRE1_2;								// APB1 Sets to 36MHz
 8000190:	4b1e      	ldr	r3, [pc, #120]	; (800020c <System_Clock_Init+0x80>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a1d      	ldr	r2, [pc, #116]	; (800020c <System_Clock_Init+0x80>)
 8000196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800019a:	6013      	str	r3, [r2, #0]
	RCC_CR |= RCC_CR_HSEON;										// Enable HSE (High-Speed External) clock
 800019c:	4b1c      	ldr	r3, [pc, #112]	; (8000210 <System_Clock_Init+0x84>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <System_Clock_Init+0x84>)
 80001a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a6:	6013      	str	r3, [r2, #0]
	while(!(RCC_CR & RCC_CR_HSERDY));							// Wait until HSE is ready
 80001a8:	bf00      	nop
 80001aa:	4b19      	ldr	r3, [pc, #100]	; (8000210 <System_Clock_Init+0x84>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f9      	beq.n	80001aa <System_Clock_Init+0x1e>

	RCC_CFGR |=	RCC_CFGR_PLLSRC_HSE;							// HSE is PLL input clock source
 80001b6:	4b15      	ldr	r3, [pc, #84]	; (800020c <System_Clock_Init+0x80>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a14      	ldr	r2, [pc, #80]	; (800020c <System_Clock_Init+0x80>)
 80001bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001c0:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= RCC_CFGR_PLLMULx8;								// PLL multiplication factor (9)
 80001c2:	4b12      	ldr	r3, [pc, #72]	; (800020c <System_Clock_Init+0x80>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a11      	ldr	r2, [pc, #68]	; (800020c <System_Clock_Init+0x80>)
 80001c8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001cc:	6013      	str	r3, [r2, #0]
	RCC_CR |= RCC_CR_PLLON;										// Enable PLL
 80001ce:	4b10      	ldr	r3, [pc, #64]	; (8000210 <System_Clock_Init+0x84>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0f      	ldr	r2, [pc, #60]	; (8000210 <System_Clock_Init+0x84>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	while(!(RCC_CR & RCC_CR_PLLRDY));							// Wait until PLL is ready
 80001da:	bf00      	nop
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <System_Clock_Init+0x84>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <System_Clock_Init+0x50>


	RCC_CFGR |= RCC_CFGR_SW_PLL;								// Set PLL as the system clock source
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <System_Clock_Init+0x80>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <System_Clock_Init+0x80>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6013      	str	r3, [r2, #0]
	while(!(RCC_CFGR & RCC_CFGR_SWS_PLL));						// Wait until PLL becomes the system clock source
 80001f4:	bf00      	nop
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <System_Clock_Init+0x80>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <System_Clock_Init+0x6a>

}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021004 	.word	0x40021004
 8000210:	40021000 	.word	0x40021000

08000214 <main>:
void Uart1_Init(void);
void Send_Char(char c);
void Send_String(char* str);

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
   System_Clock_Init();				// 64 MHz Clock Initialized
 800021a:	f7ff ffb7 	bl	800018c <System_Clock_Init>
   Gpio_Init();
 800021e:	f000 f81d 	bl	800025c <Gpio_Init>
   EXTI_Init();
 8000222:	f000 f84f 	bl	80002c4 <EXTI_Init>
   Uart1_Init();
 8000226:	f000 f881 	bl	800032c <Uart1_Init>

   while(1)
   {
	   if (USART1_SR & 0x0020)			// Wait until receiver data register is not empty
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <main+0x3c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f003 0320 	and.w	r3, r3, #32
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <main+0x16>
	   {
	       	uint8_t rx = USART1_DR;
 8000236:	4b07      	ldr	r3, [pc, #28]	; (8000254 <main+0x40>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	71fb      	strb	r3, [r7, #7]
	        if (rx == '1')
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	2b31      	cmp	r3, #49	; 0x31
 8000240:	d1f3      	bne.n	800022a <main+0x16>
	        {
	        	GPIOA_ODR = ~GPIOA_ODR;
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <main+0x44>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a04      	ldr	r2, [pc, #16]	; (8000258 <main+0x44>)
 8000248:	43db      	mvns	r3, r3
 800024a:	6013      	str	r3, [r2, #0]
	   if (USART1_SR & 0x0020)			// Wait until receiver data register is not empty
 800024c:	e7ed      	b.n	800022a <main+0x16>
 800024e:	bf00      	nop
 8000250:	40013800 	.word	0x40013800
 8000254:	40013804 	.word	0x40013804
 8000258:	4001080c 	.word	0x4001080c

0800025c <Gpio_Init>:
   }
}


void Gpio_Init(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= SET_BIT_0;			// AFIO Clock enable
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <Gpio_Init+0x5c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <Gpio_Init+0x5c>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= SET_BIT_2;			// GPIOA Clock enable
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <Gpio_Init+0x5c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <Gpio_Init+0x5c>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6013      	str	r3, [r2, #0]

	GPIOA_CRH &= 0xFFFFF000;			// A9(TX) -> Set AFIO P/P , A10(RX) -> set INPUT PU/PD, A8(LED) -> Set as output PP
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <Gpio_Init+0x60>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <Gpio_Init+0x60>)
 800027e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000282:	f023 030f 	bic.w	r3, r3, #15
 8000286:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x000008A2;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <Gpio_Init+0x60>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <Gpio_Init+0x60>)
 800028e:	f443 630a 	orr.w	r3, r3, #2208	; 0x8a0
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6013      	str	r3, [r2, #0]

	GPIOA_CRL &= 0xfffffff0;			// A0 -> internal pull-down
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <Gpio_Init+0x64>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <Gpio_Init+0x64>)
 800029e:	f023 030f 	bic.w	r3, r3, #15
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= 0x00000008;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <Gpio_Init+0x64>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <Gpio_Init+0x64>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021018 	.word	0x40021018
 80002bc:	40010804 	.word	0x40010804
 80002c0:	40010800 	.word	0x40010800

080002c4 <EXTI_Init>:


void EXTI_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

	// Configure EXTI Line0
	EXTI_IMR = 0x00000001;		//Un-mask A0 for External Interrupt
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <EXTI_Init+0x38>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	601a      	str	r2, [r3, #0]
	EXTI_RTSR = 0x00000001;		//Set Rising-edge as Interrupt
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <EXTI_Init+0x3c>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

	// Set the interrupt priority
	NVIC_IPR0 &= ~0xFF;  // Clear priority bits
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <EXTI_Init+0x40>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <EXTI_Init+0x40>)
 80002da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002de:	6013      	str	r3, [r2, #0]
    NVIC_IPR0 |= (0 << 4);  // Set priority to the lowest value (highest priority)
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <EXTI_Init+0x40>)
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <EXTI_Init+0x40>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6013      	str	r3, [r2, #0]

	// Enable the interrupt
	NVIC_ISER0 |= (1 << 6);  // EXTI0_IRQn is at position 6 in ISER register
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <EXTI_Init+0x44>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <EXTI_Init+0x44>)
 80002ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f2:	6013      	str	r3, [r2, #0]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40010400 	.word	0x40010400
 8000300:	40010420 	.word	0x40010420
 8000304:	e000e400 	.word	0xe000e400
 8000308:	e000e100 	.word	0xe000e100

0800030c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	if(EXTI_PR == 0x00000001)
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI0_IRQHandler+0x1c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d105      	bne.n	8000324 <EXTI0_IRQHandler+0x18>
	{
		EXTI_PR = 0x00000001;	//Clear Pending register
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI0_IRQHandler+0x1c>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
			Send_Char('1');
 800031e:	2031      	movs	r0, #49	; 0x31
 8000320:	f000 f822 	bl	8000368 <Send_Char>
	}

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40010450 	.word	0x40010450

0800032c <Uart1_Init>:


void Uart1_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= SET_BIT_14;				// USART1 Clock enable
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <Uart1_Init+0x30>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a09      	ldr	r2, [pc, #36]	; (800035c <Uart1_Init+0x30>)
 8000336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033a:	6013      	str	r3, [r2, #0]
	USART1_BRR = 0xd055;					// Set 1200 as Baud-rate (Clock - 64Mhz) -> Adjust based on your Clock
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <Uart1_Init+0x34>)
 800033e:	f24d 0255 	movw	r2, #53333	; 0xd055
 8000342:	601a      	str	r2, [r3, #0]
	USART1_CR1 |= ( SET_BIT_3 ) | ( SET_BIT_2 ) | ( SET_BIT_13 ); 		//Enable TX, RX, UART
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <Uart1_Init+0x38>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <Uart1_Init+0x38>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	f043 030c 	orr.w	r3, r3, #12
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	40021018 	.word	0x40021018
 8000360:	40013808 	.word	0x40013808
 8000364:	4001380c 	.word	0x4001380c

08000368 <Send_Char>:

void Send_Char(char c) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]

    while (!(USART1_SR & 0x0080));				// Wait until transmit data register is empty
 8000372:	bf00      	nop
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <Send_Char+0x28>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <Send_Char+0xc>
    USART1_DR = c;		    					// Send character
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <Send_Char+0x2c>)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	6013      	str	r3, [r2, #0]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40013800 	.word	0x40013800
 8000394:	40013804 	.word	0x40013804

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 f811 	bl	80003ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ff23 	bl	8000214 <main>

080003ce <LoopForever>:

LoopForever:
  b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003dc:	08000454 	.word	0x08000454
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e4:	20000020 	.word	0x20000020

080003e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_2_IRQHandler>
	...

080003ec <__libc_init_array>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2600      	movs	r6, #0
 80003f0:	4d0c      	ldr	r5, [pc, #48]	; (8000424 <__libc_init_array+0x38>)
 80003f2:	4c0d      	ldr	r4, [pc, #52]	; (8000428 <__libc_init_array+0x3c>)
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	42a6      	cmp	r6, r4
 80003fa:	d109      	bne.n	8000410 <__libc_init_array+0x24>
 80003fc:	f000 f81a 	bl	8000434 <_init>
 8000400:	2600      	movs	r6, #0
 8000402:	4d0a      	ldr	r5, [pc, #40]	; (800042c <__libc_init_array+0x40>)
 8000404:	4c0a      	ldr	r4, [pc, #40]	; (8000430 <__libc_init_array+0x44>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	42a6      	cmp	r6, r4
 800040c:	d105      	bne.n	800041a <__libc_init_array+0x2e>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f855 3b04 	ldr.w	r3, [r5], #4
 8000414:	4798      	blx	r3
 8000416:	3601      	adds	r6, #1
 8000418:	e7ee      	b.n	80003f8 <__libc_init_array+0xc>
 800041a:	f855 3b04 	ldr.w	r3, [r5], #4
 800041e:	4798      	blx	r3
 8000420:	3601      	adds	r6, #1
 8000422:	e7f2      	b.n	800040a <__libc_init_array+0x1e>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	0800044c 	.word	0x0800044c
 800042c:	0800044c 	.word	0x0800044c
 8000430:	08000450 	.word	0x08000450

08000434 <_init>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr

08000440 <_fini>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr
